int levenshtein(char *s1, char *s2) {
    unsigned int s1len, s2len, x, y, lastdiag, olddiag;
    s1len = strlen(s1);
    s2len = strlen(s2);
    unsigned int column[s1len+1];
    for (y = 1; y <= s1len; y++)
        column[y] = y;
    for (x = 1; x <= s2len; x++) {
        column[0] = x;
        for (y = 1, lastdiag = x-1; y <= s1len; y++) {
            olddiag = column[y];
            column[y] = MIN3(column[y] + 1, column[y-1] + 1, lastdiag + (s1[y-1] == s2[x-1] ? 0 : 1));
            lastdiag = olddiag;
        }
    }
    return(column[s1len]);
}
#include <iostream>
#include <stdio.h>
#include<fstream>
 #include<string.h>
 #include <conio.h>
using namespace std;
ostream& operator << (ostream& out, BitSet other)
cout << "[ ";
for(int i = 0; i<800 ; i++)
if(other.contains(i))
out << i << " ";
cout << "]" << endl;
BitSet BitSet::operator+(BitSet& other)
BitSet a;
for(int i = 0 ; i < 800 ; i++)
if( this->contains(i) || other.contains(i))
a.add(i);
return a;
BitSet BitSet::operator-(BitSet& other)
BitSet a;
for(int i = 0 ; i < 800 ; i++)
if( this->contains(i) && !(other.contains(i)) )
a.add(i);
return a;
BitSet BitSet::operator*(BitSet& other)
BitSet a;
for(int i = 0 ; i < 800 ; i++)
if( this->contains(i) && (other.contains(i)) )
a.add(i);
return a;
bool BitSet::operator==(BitSet& other)
for(int i = 0 ; i < 100 ; i++)
if (v[i] != other.v[i])
return false;
return true;
void BitSet::operator=(BitSet other)
copy(other.v , other.v+100 , v);
BitSet BitSet::operator +(int number)
this->add(number);
return *this;

#include <iostream>
#include <stdio.h>
#include<fstream>
 #include<string.h>
 #include <conio.h>
using namespace std;
ostream& operator << (ostream& out, BitSet other)
cout << "[ ";
for(int i = 0; i<800 ; i++)
if(other.contains(i))
out << i << " ";
cout << "]" << endl;
BitSet BitSet::operator+(BitSet& other)
BitSet a;
for(int i = 0 ; i < 800 ; i++)
if( this->contains(i) || other.contains(i))
a.add(i);
return a;
BitSet BitSet::operator-(BitSet& other)
BitSet a;
for(int i = 0 ; i < 800 ; i++)
if( this->contains(i) && !(other.contains(i)) )
a.add(i);
return a;
BitSet BitSet::operator*(BitSet& other)
BitSet a;
for(int i = 0 ; i < 800 ; i++)
if( this->contains(i) && (other.contains(i)) )
a.add(i);
return a;
bool BitSet::operator==(BitSet& other)
for(int i = 0 ; i < 100 ; i++)
if (v[i] != other.v[i])
return false;
return true;
void BitSet::operator=(BitSet other)
copy(other.v , other.v+100 , v);
BitSet BitSet::operator +(int number)
this->add(number);
return *this;

#include <iostream>
#include <stdio.h>
#include<fstream>
 #include<string.h>
 #include <conio.h>
using namespace std;
ostream& operator << (ostream& out, BitSet other)
cout << "[ ";
for(int i = 0; i<800 ; i++)
if(other.contains(i))
out << i << " ";
cout << "]" << endl;
BitSet BitSet::operator+(BitSet& other)
BitSet a;
for(int i = 0 ; i < 800 ; i++)
if( this->contains(i) || other.contains(i))
a.add(i);
return a;
BitSet BitSet::operator-(BitSet& other)
BitSet a;
for(int i = 0 ; i < 800 ; i++)
if( this->contains(i) && !(other.contains(i)) )
a.add(i);
return a;
BitSet BitSet::operator*(BitSet& other)
BitSet a;
for(int i = 0 ; i < 800 ; i++)
if( this->contains(i) && (other.contains(i)) )
a.add(i);
return a;
bool BitSet::operator==(BitSet& other)
for(int i = 0 ; i < 100 ; i++)
if (v[i] != other.v[i])
return false;
return true;
void BitSet::operator=(BitSet other)
copy(other.v , other.v+100 , v);
BitSet BitSet::operator +(int number)
this->add(number);
return *this;

#include <iostream>
#include <stdio.h>
#include<fstream>
 #include<string.h>
 #include <conio.h>
using namespace std;
ostream& operator << (ostream& out, BitSet other)
cout << "[ ";
for(int i = 0; i<800 ; i++)
if(other.contains(i))
out << i << " ";
cout << "]" << endl;
BitSet BitSet::operator+(BitSet& other)
BitSet a;
for(int i = 0 ; i < 800 ; i++)
if( this->contains(i) || other.contains(i))
a.add(i);
return a;
BitSet BitSet::operator-(BitSet& other)
BitSet a;
for(int i = 0 ; i < 800 ; i++)
if( this->contains(i) && !(other.contains(i)) )
a.add(i);
return a;
BitSet BitSet::operator*(BitSet& other)
BitSet a;
for(int i = 0 ; i < 800 ; i++)
if( this->contains(i) && (other.contains(i)) )
a.add(i);
return a;
bool BitSet::operator==(BitSet& other)
for(int i = 0 ; i < 100 ; i++)
if (v[i] != other.v[i])
return false;
return true;
void BitSet::operator=(BitSet other)
copy(other.v , other.v+100 , v);
BitSet BitSet::operator +(int number)
this->add(number);
return *this;	
