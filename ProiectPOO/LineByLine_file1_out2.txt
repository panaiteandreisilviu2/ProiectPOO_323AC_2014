#ifndef cimg_plugin_matlab
#define cimg_plugin_matlab
#define CIMGMATLAB_VER 0102
#ifndef mex_h
#error the file mex.h must be included prior to inclusion of cimgmatlab.h
#endif
#ifndef cimg_version
#error cimgmatlab.h requires that CImg.h is included!
#endif
#if !defined(MX_API_VER) || MX_API_VER < 0x7030000
typedef int mwSize;
#endif
private:
static int isNumericalClassID(mxClassID id) 
 
 switch (id) 
 case mxLOGICAL_CLASS:
 case mxDOUBLE_CLASS:
 case mxSINGLE_CLASS:
 case mxINT8_CLASS:
 case mxUINT8_CLASS:
 case mxINT16_CLASS:
 case mxUINT16_CLASS:
 case mxINT32_CLASS:
 case mxUINT32_CLASS:
 case mxINT64_CLASS:
 case mxUINT64_CLASS: return 1;
 default: return 0;
 

void makeImageFromMatlabData(const mxArray *matlabArray, mxClassID classID) 
 if (classID==mxLOGICAL_CLASS) 
 
 mxLogical *mdata = mxGetLogicals(matlabArray);
 cpMatlabData((const mxLogical *)mdata);
  else 
 void *mdata = (void*)mxGetPr(matlabArray);
 switch (classID) 
 case mxDOUBLE_CLASS : cpMatlabData((const real64_T*)mdata); break;
 case mxSINGLE_CLASS : cpMatlabData((const real32_T*)mdata); break;
 case mxINT8_CLASS : cpMatlabData((const int8_T*)mdata); break;
 case mxUINT8_CLASS : cpMatlabData((const uint8_T*)mdata); break;
 case mxINT16_CLASS : cpMatlabData((const int16_T*)mdata); break;
 case mxUINT16_CLASS : cpMatlabData((const uint16_T*)mdata); break;
 case mxINT32_CLASS : cpMatlabData((const int32_T*)mdata); break;
 case mxUINT32_CLASS : cpMatlabData((const uint32_T*)mdata); break;
 case mxINT64_CLASS : cpMatlabData((const int64_T*)mdata); break;
 case mxUINT64_CLASS : cpMatlabData((const uint64_T*)mdata); break;
 
 

template <typename t> void cpMatlabData(const t* mdata) 
 if (cimg::type<t>::is_float()) 
 cimg_forXYZC(*this,x,y,z,v) (*this)(x,y,z,v) = (T)(mdata[((v*_depth + z)*_width + x)*_height + y]);
  else 
 cimg_forXYZC(*this,x,y,z,v) (*this)(x,y,z,v) = (T)(int)(mdata[((v*_depth + z)*_width + x)*_height + y]);
 

public:
CImg(const mxArray *matlabArray, const bool vdata = false)
 : _is_shared(false) 
 mwSize nbdims = mxGetNumberOfDimensions(matlabArray);
 mxClassID classID = mxGetClassID(matlabArray);
 if (nbdims>4 || !isNumericalClassID(classID)) 
 _data = 0; _width = _height = _depth = _spectrum = 0;
#if cimg_debug>1
 cimg::warn("MATLAB array is more than 4D or/and not numerical, returning an empty image.");
#endif
  else 
 const mwSize *dims = mxGetDimensions(matlabArray);
 _depth = _spectrum = 1;
 _width = (unsigned)dims[1];
 _height = (unsigned)dims[0];
 if (nbdims==4)  _depth = (unsigned)dims[2]; _spectrum = (unsigned)dims[3]; 
 else if (nbdims==3) 
 if (vdata) _spectrum = (unsigned)dims[2]; else _depth = (unsigned)dims[2];
 
 _data = new T[size()];
 makeImageFromMatlabData(matlabArray,classID);
 

CImg & operator=(const mxArray *matlabArray) 
 int
 nbdims = (int)mxGetNumberOfDimensions(matlabArray),
 classID = mxGetClassID(matlabArray);
 if (nbdims>4 || !isNumericalClassID(classID)) 
 delete [] _data; _data = 0;
 _width = _height = _depth = _spectrum = 0;
#if cimg_debug>1
 cimg::warn("MATLAB array is more than 4D or/and not numerical, returning an empty image.");
#endif
  else 
 const mwSize *dims = mxGetDimensions(matlabArray);
 _depth = _spectrum = 1;
 _width = (unsigned)dims[1];
 _height = (unsigned)dims[0];
 if (nbdims>2) _depth = (unsigned)dims[2];
 else if (nbdims>3) _spectrum = (unsigned)dims[3];
 delete [] _data;
 _data = new T[size()];
 makeImageFromMatlabData(matlabArray,classID);
 

private:
template <typename c> void populate_maltlab_array(c *const mdata) const 
 cimg_forXYZC(*this,x,y,z,v) mdata[((v*_depth + z)*_width + x)*_height + y] = (c)(*this)(x,y,z,v);

void populate_maltlab_array(mxLogical *const mdata) const 
 cimg_forXYZC(*this,x,y,z,v) mdata[((v*_depth + z)*_width + x)*_height + y] = (mxLogical)((*this)(x,y,z,v)!=0);

public:
mxArray *toMatlab(mxClassID classID=mxDOUBLE_CLASS, const bool squeeze=false) const 
 if (!isNumericalClassID(classID)) 
#if cimg_debug>1
 cimg::warn("Invalid MATLAB Class Id Specified.");
#endif
 return 0;
 
 mwSize dims[4];
 dims[0] = (mwSize)_height;
 dims[1] = (mwSize)_width;
 dims[2] = (mwSize)_depth;
 dims[3] = (mwSize)_spectrum;
 if (squeeze && _depth == 1) 
 dims[2] = (mwSize)_spectrum;
 dims[3] = (mwSize)1;
 
 mxArray *matlabArray = mxCreateNumericArray((mwSize)4,dims,classID,mxREAL);
 if (classID==mxLOGICAL_CLASS) 
 mxLogical *mdata = mxGetLogicals(matlabArray);
 populate_maltlab_array(mdata);
  else 
 void *mdata = mxGetPr(matlabArray);
 switch (classID) 
 case mxDOUBLE_CLASS : populate_maltlab_array((real64_T*)mdata); break;
 case mxSINGLE_CLASS : populate_maltlab_array((real32_T*)mdata); break;
 case mxINT8_CLASS : populate_maltlab_array((int8_T*)mdata); break;
 case mxUINT8_CLASS : populate_maltlab_array((uint8_T*)mdata); break;
 case mxINT16_CLASS : populate_maltlab_array((int16_T*)mdata); break;
 case mxUINT16_CLASS : populate_maltlab_array((uint16_T*)mdata); break;
 case mxINT32_CLASS : populate_maltlab_array((int32_T*)mdata); break;
 case mxUINT32_CLASS : populate_maltlab_array((uint32_T*)mdata); break;
 case mxINT64_CLASS : populate_maltlab_array((int64_T*)mdata); break;
 case mxUINT64_CLASS : populate_maltlab_array((uint64_T*)mdata); break;
 
 
 return matlabArray;

#endif
